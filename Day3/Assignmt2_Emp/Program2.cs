using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assignmt2_Emp
{
    class Program2
    {
        #region Main Method
        static void Main()
        {
            Manager2 m = new Manager2("Manav",10000, 100, "Tester");
            m.Show();
            m.Insert();
            m.Update();
            m.Delete();

            GeneralManager2 gm = new GeneralManager2("Shashi", 20000, 101, "Dev", "Perks1");
            gm.Show();
            gm.Insert();
            gm.Update();
            gm.Delete();

            CEO2 c = new CEO2("Riva", 35000, 102);
            c.Show();
            c.Insert();
            c.Update();
            c.Delete();

            Console.ReadLine();
        }
        #endregion Main Method
    }

    #region IDBFunction Interface
    public interface IDBFunction
    {
        void Insert();
        void Update();
        void Delete();

        void Show();

    }
    #endregion IDBFunction Interface

    #region Class Employee2
    public abstract class Employee2
    {
        #region Property
        //string Name -> no blanks
        protected string name;
        public string Name
        {
            set
            {
                if (value != null)
                {
                    name = value;
                }
                else
                {
                    Console.WriteLine("Invalid Input");
                }
            }
            get
            {
                return name;
            }
        }
        #endregion Property

        #region Property
        //int EmpNo -> must be readonly and autogenerated
        static protected int lastEmpNo = 0;
        protected int empNo;
        public int EmpNo
        {
            get
            {
                return empNo;
            }
        }
        #endregion Property

        #region Property
        //decimal Basic -> must be between some range
        protected decimal basics;
        public abstract decimal Basics
        {
            set;
            get;
        }
        #endregion Property

        #region Property
        //short DeptNo -> must be > 0
        protected short deptNo;
        public short DeptNo
        {
            set
            {
                if (value > 0)
                {
                    deptNo = value;
                }
                else
                {
                    Console.WriteLine("Invalid Input");
                }
            }
            get
            {
                return deptNo;
            }
        }
        #endregion Property
        
        #region Constructor
        public Employee2(string nm = null, decimal bs=0, short dp=0)
        {
            name = nm;
            basics = bs;
            deptNo = dp;
            empNo = lastEmpNo++;
        }
        #endregion Constructor

        #region Abstract Method
        public abstract decimal CalcNetSalary();
        #endregion Abstract Method

        //#region Show Method
        //public void Show()
        //{
        //    Console.WriteLine("Name :"+name);
        //    Console.WriteLine("EMP No :" + empNo);
        //    Console.WriteLine("Basic Salary :" + basics);
        //    Console.WriteLine("Dept No :" + deptNo);
        //}
        //#endregion Show Method
    }
    #endregion Class Employee2

    #region Class Manager2
    public class Manager2 : Employee2, IDBFunction
    {
        #region Property
        public override decimal Basics 
        {
            set
            {
                if (value > 5000 && value < 50000)
                {
                    basics = value;
                }
                else
                {
                    Console.WriteLine("Inavlid Input");
                }
            }
            get
            {
                return basics;
            }
        }
        #endregion Property

        #region Property
        //string Name -> no blanks
        protected string designation;
        public string Designation
        {
            set
            {
                if (value != null)
                {
                    designation = value;
                }
                else
                {
                    Console.WriteLine("Invalid Input");
                }
            }
            get
            {
                return designation;
            }
        }
        #endregion Property

        #region Override method CalcNetSalary
        public override decimal CalcNetSalary()
        {
            decimal netsal = basics + (basics / 4);
            return netsal;
        }
        #endregion Override method CalcNetSalary

        #region Constructor
        public Manager2(string nm = null, decimal bs = 0, short dp = 0, string dsgn = null) :base(nm, bs, dp)
        {
            //this.name = nm;
            //this.basics = bs;
            //this.deptNo = dp;
            this.designation = dsgn;
            //empNo = lastEmpNo++;
        }
        #endregion Constructor

        #region Show Method
        public void Show()
        {
            Console.WriteLine("Name :" + name);
            Console.WriteLine("Emp No :" + empNo);
            Console.WriteLine("Designation :" + designation);
            Console.WriteLine("Basic Salary :" + basics);
            Console.WriteLine("Dept No :" + deptNo);
        }
        #endregion Show Method

        #region Interface Method
        public void Insert()
        {
            Console.WriteLine("Manager Class Insert Function");
        }

        public void Update()
        {
            Console.WriteLine("Manager Class Update Function");
        }

        public void Delete()
        {
            Console.WriteLine("Manager Class Delete Function");
        }

        #endregion Interface Method
    }
    #endregion Class Manager2

    #region Class GeneralManager2
    public class GeneralManager2 : Manager2, IDBFunction
    {
        #region Property
        public override decimal Basics
        {
            set
            {
                if (value > 10000 && value < 50000)
                {
                    basics = value;
                }
                else
                {
                    Console.WriteLine("Inavlid Input");
                }
            }
            get
            {
                return basics;
            }
        }
        #endregion Property

        #region Property
        protected string perks;
        public string Perks
        {
            get
            {
                return perks;
            }
        }
        #endregion Property

        #region Override method CalcNetSalary
        public override decimal CalcNetSalary()
        {
            decimal netsal = basics + (basics / 4);
            return netsal;
        }
        #endregion Override method CalcNetSalary

        #region Constructor
        public GeneralManager2(string nm = null, decimal bs = 0, short dp = 0, string dsgn = null, string pr = null) : base(nm, bs, dp, dsgn)
        {
            //this.name = nm;
            //this.basics = bs;
            //this.deptNo = dp;
            //this.designation = dsgn;
            this.perks = pr;
        }
        #endregion Constructor

        #region Show Method
        public new void Show()
        {
            Console.WriteLine("Name :" + name);
            Console.WriteLine("Emp No :" + empNo);
            Console.WriteLine("Designation :" + designation);
            Console.WriteLine("Basic Salary :" + basics);
            Console.WriteLine("Dept No :" + deptNo);
            Console.WriteLine("Perks :" + perks);
            Console.WriteLine("NetSal :" + CalcNetSalary());

        }
        #endregion Show Method
    }
    #endregion Class GeneralManager2

    #region Class CEO2
    public class CEO2 : Employee2, IDBFunction
    {
        #region Property
        public override decimal Basics
        {
            set
            {
                if (value > 15000 && value < 60000)
                {
                    basics = value;
                }
                else
                {
                    Console.WriteLine("Inavlid Input");
                }
            }
            get
            {
                return basics;
            }
        }
        #endregion Property

        #region Override method CalcNetSalary
        public sealed override decimal CalcNetSalary()
        {
            decimal netsal = basics + (basics / 4);
            return netsal;
        }
        #endregion Override method CalcNetSalary

        #region Constructor
        public CEO2(string nm = null, decimal bs = 0, short dp = 0) : base(nm, bs, dp)
        {
            this.name = nm;
            this.basics = bs;
            this.deptNo = dp;
            
        }
        #endregion Constructor

        #region Show Method
        public void Show()
        {
            Console.WriteLine("Name :" + name);
            Console.WriteLine("Emp No :" + empNo);
            Console.WriteLine("Basic Salary :" + basics);
            Console.WriteLine("Dept No :" + deptNo);
  
        }
        #endregion Show Method

        #region Interface Method
        public void Insert()
        {
            Console.WriteLine("CEO Class Insert Function");
        }

        public void Update()
        {
            Console.WriteLine("CEO Class Update Function");
        }

        public void Delete()
        {
            Console.WriteLine("CEO Class Delete Function");
        }
        #endregion Interface Method
    }
    #endregion Class CEO2
}
