using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assignmt2_Emp
{
    class Program
    {
        #region Main Method
        static void Main1()
        {
            Manager m = new Manager("Manav",10000, 100, "Tester");
            m.ShowM();

            GeneralManager gm = new GeneralManager("Shashi", 15000, 101, "Dev", "Perks1");
            gm.ShowGM();
            
            CEO c = new CEO("Riva", 12000, 102);
            c.ShowCEO();

            Console.ReadLine();
        }
        #endregion Main Method
    }

    #region Class Employee
    public abstract class Employee
    {
        #region Property
        //string Name -> no blanks
        protected string name;
        public string Name
        {
            set
            {
                if (value != null)
                {
                    name = value;
                }
                else
                {
                    Console.WriteLine("Invalid Input");
                }
            }
            get
            {
                return name;
            }
        }
        #endregion Property

        #region Property
        //int EmpNo -> must be readonly and autogenerated
        static protected int lastEmpNo = 0;
        protected int empNo;
        public int EmpNo
        {
            get
            {
                return empNo;
            }
        }
        #endregion Property

        #region Property
        //decimal Basic -> must be between some range
        protected decimal basics;
        public abstract decimal Basics
        {
            set;
            get;
        }
        #endregion Property

        #region Property
        //short DeptNo -> must be > 0
        protected short deptNo;
        public short DeptNo
        {
            set
            {
                if (value > 0)
                {
                    deptNo = value;
                }
                else
                {
                    Console.WriteLine("Invalid Input");
                }
            }
            get
            {
                return deptNo;
            }
        }
        #endregion Property
        
        #region Constructor
        public Employee(string nm = null, decimal bs=0, short dp=0)
        {
            name = nm;
            basics = bs;
            deptNo = dp;
            empNo = lastEmpNo++;
        }
        #endregion Constructor

        #region Abstract Method
        public abstract decimal CalcNetSalary();
        #endregion Abstract Method

        //#region Show Method
        //public void Show()
        //{
        //    Console.WriteLine("Name :"+name);
        //    Console.WriteLine("EMP No :" + empNo);
        //    Console.WriteLine("Basic Salary :" + basics);
        //    Console.WriteLine("Dept No :" + deptNo);
        //}
        //#endregion Show Method
    }
    #endregion Class Employee

    #region Class Manager
    public class Manager : Employee
    {
        public override decimal Basics 
        {
            get; //{ } 
            set; //{ } 
        }

        #region Property
        //string Name -> no blanks
        protected string designation;
        public string Designation
        {
            set
            {
                if (value != null)
                {
                    designation = value;
                }
                else
                {
                    Console.WriteLine("Invalid Input");
                }
            }
            get
            {
                return designation;
            }
        }
        #endregion Property

        #region Override method CalcNetSalary
        public override decimal CalcNetSalary()
        {
            decimal netsal = basics + (basics / 4);
            return netsal;
        }
        #endregion Override method CalcNetSalary

        #region Constructor
        public Manager(string nm = null, decimal bs = 0, short dp = 0, string dsgn = null) :base(nm, bs, dp)
        {
            //this.name = nm;
            //this.basics = bs;
            //this.deptNo = dp;
            this.designation = dsgn;
            //empNo = lastEmpNo++;
        }
        #endregion Constructor

        #region Show Method
        public void ShowM()
        {
            Console.WriteLine("Name :" + name);
            Console.WriteLine("Emp No :" + empNo);
            Console.WriteLine("Designation :" + designation);
            Console.WriteLine("Basic Salary :" + basics);
            Console.WriteLine("Dept No :" + deptNo);
        }
        #endregion Show Method
    }
    #endregion Class Manager

    #region Class GeneralManager
    public class GeneralManager : Manager
    {
        #region Property
        protected string perks;
        public string Perks
        {
            get
            {
                return perks;
            }
        }
        #endregion Property

        #region Override method CalcNetSalary
        public override decimal CalcNetSalary()
        {
            decimal netsal = basics + (basics / 4);
            return netsal;
        }
        #endregion Override method CalcNetSalary

        #region Constructor
        public GeneralManager(string nm = null, decimal bs = 0, short dp = 0, string dsgn = null, string pr = null) : base(nm, bs, dp, dsgn)
        {
            //this.name = nm;
            //this.basics = bs;
            //this.deptNo = dp;
            //this.designation = dsgn;
            this.perks = pr;
        }
        #endregion Constructor

        #region Show Method
        public void ShowGM()
        {
            Console.WriteLine("Name :" + name);
            Console.WriteLine("Emp No :" + empNo);
            Console.WriteLine("Designation :" + designation);
            Console.WriteLine("Basic Salary :" + basics);
            Console.WriteLine("Dept No :" + deptNo);
            Console.WriteLine("Perks :" + perks);
        }
        #endregion Show Method
    }
    #endregion Class GeneralManager

    #region Class CEO
    public class CEO : Employee
    {
        public override decimal Basics 
        { 
            get; 
            set; 
        }

        #region Override method CalcNetSalary
        public sealed override decimal CalcNetSalary()
        {
            decimal netsal = basics + (basics / 4);
            return netsal;
        }
        #endregion Override method CalcNetSalary

        #region Constructor
        public CEO(string nm = null, decimal bs = 0, short dp = 0) : base(nm, bs, dp)
        {
            this.name = nm;
            this.basics = bs;
            this.deptNo = dp;
            
        }
        #endregion Constructor

        #region Show Method
        public void ShowCEO()
        {
            Console.WriteLine("Name :" + name);
            Console.WriteLine("Emp No :" + empNo);
            Console.WriteLine("Basic Salary :" + basics);
            Console.WriteLine("Dept No :" + deptNo);
  
        }
        #endregion Show Method
    }
    #endregion Class CEO
}
